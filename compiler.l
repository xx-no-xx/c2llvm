D			[0-9]
L			[a-zA-Z_]
H			[a-fA-F0-9]
E			[Ee][+-]?{D}+
FS			(f|F|l|L)
IS			(u|U|l|L)* 


/* 上方是一些便于正则表达式的定义，D指数字，L指字母？，H指十六进制可能用到的东西，E指表达式，其余含义不明*/
/* TODO: 处于不明原因对其保留, 后续需要修改 */

%{
#include <cstdio> // 因为在此处使用了printf
#include <cstdlib>
#include <string>
#include <iostream>
#include "ast.h"
#include "generator.h"
#include "y.tab.hpp" // generated by YACC
using namespace std;

#define MAX_STR_VALUE 100
#define MAX_TYPE_NAME 100

void TESTONLY();
void save_type(std::string str);
void save_value(std::string str);

%}

%%

"int" { save_type("INT"); return INT; } // int标识符

[0-9] { save_value("INT_CONSTANT"); return INT_CONSTANT; } // TODO: 修改为正确的正则表达式

"=" { save_type("ASSIGN"); return ASSIGN; } // 赋值=号

";" { save_type("SEMICOLON"); return SEMICOLON; }  // 分号;

[a-z] { save_value("IDENTIFIER"); return IDENTIFIER; }

%%

/*
下面是一个放在%%之中的例子:
"int"			{ TESTONLY(); yylval.type = (char*)("int_type"); yylval.number = 123123; return INT; } // 匹配"int", 每个匹配需要返回一个标识符，标识符会被随机分配一个int，
{D}+{IS}? { printf("CONSTANT:%s\n", yytext); yylval.type = (char*)("constant_type"); return CONSTANT; } // 匹配一个十进制数（这个匹配可能是有问题的） . 在{}里写操作。
"tni"     { yylval.number = 321321; return INT; }
*/

// save_type: 保存这个变量的类型，到yylval.type
void save_type(std::string str) {
	yylval.type = new std::string(str);
	return;
}

// save_value: 对于形如321这样的常数变量，通过str制定它被保存的value应该如何解析
void save_value(std::string str) { 
	if(str == "INT_CONSTANT") {
		yylval.int_value = atoi(yytext);
	}
	else if(str == "IDENTIFIER") {
		yylval.str_value = new std::string(yytext);
	}
	return;
}

void TESTONLY(void) {
	std::cout << "INT:" << yytext << std::endl;
	return;
}

int yywrap(void) {
	return 1;
}
