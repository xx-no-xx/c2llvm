D			[0-9]
L			[a-zA-Z_]
H			[a-fA-F0-9]
E			[Ee][+-]?{D}+
FS			(f|F|l|L)
IS			(u|U|l|L)* 


/* 上方是一些便于正则表达式的定义，D指数字，L指字母？，H指十六进制可能用到的东西，E指表达式，*/

%{
#include <cstdio> // 因为在此处使用了printf
#include <cstdlib>
#include <string>
#include <iostream>
#include "ast.h"
#include "generator.h"
#include "y.tab.hpp" // generated by YACC
using namespace std;

#define MAX_STR_VALUE 100
#define MAX_TYPE_NAME 100

void TESTONLY();
void save_value(std::string str);

%}

%%
"..."		{ return VARARG; }
"extern"	{ return EXTERN; }

"+"         { return TADD;}
"-"         { return TSUB;}
"*"         { return TMUL;}
"/"         { return TDIV;}
"%"         { return TMOD;}
"<<"        { return TLSFT;}
">>"        { return TRSFT;}
"|"         { return TBIT_OR;}
"&"         { return TBIT_AND;}
"^"         { return TBIT_XOR;}
"!"         { return TBIT_NOT;}

"&&"        { return TAND;}
"||"        { return TOR;}
"=" 		{ return ASSIGN; } // 赋值=号
"=="        { return TCEQ;}
"!="        { return TCNE;}
"<"         { return TCLT;}
"<="        { return TCLE;}
">"         { return TCGT;}
">="        { return TCGE;}

"("         { return TLPAREN;}
")"         { return TRPAREN;}
"["         { return TLBRACKET;}
"]"         { return TRBRACKET;}
"{"         { return TLBRACE;}
"}"         { return TRBRACE;}

","         { return TCOMMA;}
"."         { return TDOT;}
";" 		{ return SEMICOLON; }  // 分号;

"if"		{ return IF; }
"else"		{ return ELSE; }
"while"		{ return WHILE; }
"for"		{ return FOR; }
"break"		{ return BREAK; }
"continue"	{ return CONTINUE; }
"return"	{ return RETURN; }

"int" 		{ return INT; } // int标识符
"char"		{ return CHAR; }
"double"	{ return FLOAT; }
"float"		{ return FLOAT; }
"void"		{ return VOID; }
"char*"		{ return CHAR_PTR;}
"char *"	{ return CHAR_PTR;}

{D}+ 		{ save_value("INT_CONSTANT"); return INT_CONSTANT; } 

'(\\.|[^\\'])' {
    // save_type("CHAR_LITERAL");
    yylval.char_value = new std::string(yytext);
    return CHAR_CONSTANT;
}	// 字符

\"(\\.|[^\\"])*\" {
	yylval.str_value = new std::string(yytext);
	yylval.str_value->erase(remove(yylval.str_value->begin(), yylval.str_value->end(), '"'), yylval.str_value->end()); 
  std::string::size_type pos = 0;
	std::string sub_str = {R"(\n)"};
	std::string rep_str = {"\n"};
  while((pos = yylval.str_value->find(sub_str)) != std::string::npos)  {
      yylval.str_value->replace(pos, sub_str.length(), rep_str);
  }
	return STR_CONSTANT;
}

{L}({L}|{D})* { save_value("IDENTIFIER"); return IDENTIFIER; }

([1-9][0-9]*)|0|([0-9]+\.[0-9]*) {
    float temp;
    sscanf(yytext, "%f", &temp);
    yylval.float_value = temp;
    return FLOAT_CONSTANT;
} // double型

[ \t\v\f] 
. {
    fprintf(stderr, "lexical error.\n");
    exit(1);
}
%%

// save_value: 对于形如321这样的常数变量，通过str制定它被保存的value应该如何解析
void save_value(std::string str) { 
	if(str == "INT_CONSTANT") {
		yylval.int_value = atoi(yytext);
	}
	else if(str == "IDENTIFIER") {
		yylval.str_value = new std::string(yytext);
	}
	return;
}

void TESTONLY(void) {
	std::cout << "INT:" << yytext << std::endl;
	return;
}

int yywrap(void) {
	return 1;
}
