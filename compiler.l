D			[0-9]
L			[a-zA-Z_]
H			[a-fA-F0-9]
E			[Ee][+-]?{D}+
FS			(f|F|l|L)
IS			(u|U|l|L)* 


/* 上方是一些便于正则表达式的定义，D指数字，L指字母？，H指十六进制可能用到的东西，E指表达式，其余含义不明*/
/* TODO: 处于不明原因对其保留, 后续需要修改 */

%{
#include <cstdio> // 因为在此处使用了printf
#include <cstdlib>
#include <string>
#include <iostream>
#include "ast.h"
#include "generator.h"
#include "y.tab.hpp" // generated by YACC
using namespace std;

#define MAX_STR_VALUE 100
#define MAX_TYPE_NAME 100

void TESTONLY();
void save_type(std::string str);
void save_value(std::string str);

%}

%%
"+"         { save_type("TADD"); return TADD;}
"-"         { save_type("TSUB"); return TSUB;}
"*"         { save_type("TMUL"); return TMUL;}
"/"         { save_type("TDIV"); return TDIV;}
"%"         { save_type("TMOD"); return TMOD;}
"<<"        { save_type("TLSFT"); return TLSFT;}
">>"        { save_type("TRSFT"); return TRSFT;}
"|"         { save_type("TBIT_OR"); return TBIT_OR;}
"&"         { save_type("TBIT_AND"); return TBIT_AND;}
"^"         { save_type("TBIT_XOR"); return TBIT_XOR;}
"!"         { save_type("TBIT_NOT"); return TBIT_NOT;}

"&&"        { save_type("TAND"); return TAND;}
"||"        { save_type("TOR"); return TOR;}
"=" 		{ save_type("ASSIGN"); return ASSIGN; } // 赋值=号
"=="        { save_type("TCEQ"); return TCEQ;}
"!="        { save_type("TCNE"); return TCNE;}
"<"         { save_type("TCLT"); return TCLT;}
"<="        { save_type("TCLE"); return TCLE;}
">"         { save_type("TCGT"); return TCGT;}
">="        { save_type("TCGE"); return TCGE;}

"("         { save_type("TLPAREN"); return TLPAREN;}
")"         { save_type("TRPAREN"); return TRPAREN;}
"["         { save_type("TLBRACKET"); return TLBRACKET;}
"]"         { save_type("TRBRACKET"); return TRBRACKET;}
"{"         { save_type("TLBRACE"); return TLBRACE;}
"}"         { save_type("TRBRACE"); return TRBRACE;}

"\n"        { save_type("TCR"); return TCR;}
","         { save_type("TCOMMA"); return TCOMMA;}
"."         { save_type("TDOT"); return TDOT;}
";" 		{ save_type("SEMICOLON"); return SEMICOLON; }  // 分号;

"if"		{ save_type("IF"); return IF; }
"else"		{ save_type("ELSE"); return ELSE; }
"while"		{ save_type("WHILE"); return WHILE; }
"break"		{ save_type("BREAK"); return BREAK; }
"continue"	{ save_type("CONTINUE"); return CONTINUE; }
"return"	{ save_type("RETURN"); return RETURN; }

"int" 		{ save_type("INT"); return INT; } // int标识符
"char"		{ save_type("CHAR"); return CHAR; }
"double"	{ save_type("DOUBLE"); return DOUBLE; }
"void"		{ save_type("VOID"); return VOID; }

{D}+ 		{ save_value("INT_CONSTANT"); return INT_CONSTANT; } // TODO: 修改为正确的正则表达式

'(\\.|[^\\'])' {
    // save_type("CHAR_LITERAL");
    yylval.char_value = new std::string(yytext);
	std::cout << "char: " << yytext << std::endl; // debug用
    return CHAR_CONSTANT;
}	// 字符

{L}({L}|{D})* { save_value("IDENTIFIER"); return IDENTIFIER; }

([1-9][0-9]*)|0|([0-9]+\.[0-9]*) {
    double temp;
    sscanf(yytext, "%lf", &temp);
    yylval.double_value = temp;
    return DOUBLE_CONSTANT;
} // double型

[ \t\v\n\f]
. {
    fprintf(stderr, "lexical error.\n");
    exit(1);
}
%%

/*
下面是一个放在%%之中的例子:
"int"			{ TESTONLY(); yylval.type = (char*)("int_type"); yylval.number = 123123; return INT; } // 匹配"int", 每个匹配需要返回一个标识符，标识符会被随机分配一个int，
{D}+{IS}? { printf("CONSTANT:%s\n", yytext); yylval.type = (char*)("constant_type"); return CONSTANT; } // 匹配一个十进制数（这个匹配可能是有问题的） . 在{}里写操作。
"tni"     { yylval.number = 321321; return INT; }
*/

// save_type: 保存这个变量的类型，到yylval.type
void save_type(std::string str) {
	yylval.type = new std::string(str);
	return;
}

// save_value: 对于形如321这样的常数变量，通过str制定它被保存的value应该如何解析
void save_value(std::string str) { 
	if(str == "INT_CONSTANT") {
		yylval.int_value = atoi(yytext);
	}
	else if(str == "IDENTIFIER") {
		yylval.str_value = new std::string(yytext);
	}
	return;
}

void TESTONLY(void) {
	std::cout << "INT:" << yytext << std::endl;
	return;
}

int yywrap(void) {
	return 1;
}
